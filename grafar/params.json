{"name":"Grafar","tagline":"A mathematical visualization tool in pure javascript.","body":"#Grafar quick reference\r\n\r\n##What's included\r\n\r\n* grafar -- a WebGL-based library for displaying large amounts of data efficiently.\r\n* grafaryaz -- a source-to-source compiler for translating systems of equations \r\ninto executable JavaScript code.\r\n* [Three.js r68](https://github.com/mrdoob/three.js) (with orbit controls and detector) by mrdoob\r\n* [i-color](https://github.com/Shushik/i-color) by shushik\r\n\r\n##Getting started\r\n\r\nTo get your own copy of grafar, click the \"Download zip\" button in the repo. In \r\norder for the linking to work properly, unpack the archive into a folder called \r\n`js/` in your project, like this:\r\n```\r\nprojectDirectory/\r\n\tjs/\r\n\t\tlibs/\r\n\t\tgrafar/\r\n\t\tgrafaryaz/\r\n\t\tloader.js\r\n\t\t[some custom scripts]\r\n\t[your HTML files here]\r\n```\r\n\r\nSince I never took the time to build the library, it is slightly tricky to \r\ninclude into your html. I would recommend referencing the `loader.js` file. \r\nIt uses LABjs library to download all the project files in the right order \r\nand run your code (passed in a callback function) once the files are loaded. \r\nSo, you'd probably want something like this:\r\n```html\r\n<script type=\"text/javascript\" src=\"js/loader.js\"></script>\r\n<script type=\"text/javascript\">\r\n\trunGrafar(function() { ... some code here ... });\r\n</script>\r\n```\r\nOf course, you are very welcome to mess it all up! Just remember, the order \r\nmatters. By the way, take a look at the demos in the `examples` folder -- \r\nthey do cover the basic usage quite well. Please refer to the example `grafar_basic_usage.html`.\r\n\r\n##Using grafar.\r\n\r\n###Creating panels.\r\n\r\nA panel is the area in which your graphs are drawn. It corresponds to \r\nan html `figure` (or a `div`, if you're feeling non-semantic) and a WebGl\r\ncontext.\r\n\r\nFirst, you need to create and position the HTML elements that would be used \r\nfor displaying your graphs. See `grafar_panel_basics.html` for a reference on\r\nhow to achieve this via basic HTML and CSS positioning.\r\n\r\nThen you should initialize a panel inside such an element. The panel extends to fit\r\nthe element. If you are curious, a WebGL context and a camera are created, their \r\noutput is binded to a `canvas` element, which is then appended to the `figure` specified.\r\n\r\n#### `new grafar.Panel(<DOM element>, [{id: <string>}])`\r\n\r\nCreate a new panel inside the DOM element specified. If the `id` is left unspecified,\r\na random one is generated. The Panel created is then stored in a special table \r\nand can be accessed as `grafar.panels[<id>]`.\r\n\r\n#### `<Panel object>.setAxes(<Array of strings>)`\r\n\r\nAssign the names to the axes. Default is `['x', 'y', 'z']`. You *can* assign \r\ntwo axes to make the panel 2D (planar graph), but currently you *can't* add \r\nany data to such a panel (I'm terribly sorry about this). If you change the \r\naxis names after drawing them, the graph would not be updated. The instance \r\nof `Panel` on which the method was called is returned.\r\n\r\n#### `<Panel object>.drawAxes(<number>)`\r\n\r\nDisplay the axes of the given length. The instance of `Panel` on which the \r\nmethod was called is returned.\r\n\r\n###Creating graphs\r\n\r\nThe Graph is a basic display unit in grafar. It acts as a container for your \r\ndata and provides some styling options, namely:\r\n* color (a palette, actually -- refer to docs on grafar.Style),\r\n* visibility (show / hide),\r\n* corresponding panel,\r\n* parent graph.\r\nThe first three properties are inherited from the parent, if not set explicitly. \r\nThe graphs present in a scene form a tree structure. When grafar is launched, \r\nthe root graph, called `$`, is created. It is a predecessor of any graph. Refer\r\nto `grafar_graph_basics.html` for an example.\r\n\r\n#### `new grafar.Graph([<config>])`\r\n\r\nCreate a new empty graph. If the `config` object passed to this function does \r\nnot contain a property `id`, a random id is generated. The Graph is then stored \r\nand can be accessed as `grafar.graphs[<id>]`. Once the graph is created, its \r\n`setup` method is called with <config>.\r\n\r\n#### `<Graph object>.setStyle(<Style object>)`\r\n\r\nSet the styling of the graph. Refer to docs on `grafar.Style` for further \r\ndetails.The styles of children objects are updated accordingly. Returns \r\na reference to the target Graph object.\r\n\r\n#### `<Graph object>.setHiding(<boolean>)`\r\n\r\nShow / hide the graph (pass `true` to hide, `false` to show). The visibility \r\nof children objects is updated accordingly. Returns a reference to the target \r\nGraph object.\r\n\r\n#### `<Graph object>.setPanel(<Panel object>)`\r\n\r\nDisplay the graph on the Panel specified. Also moves all the children graphs \r\nwith no explicitly set Panel to this Panel. Returns a reference to the target \r\nGraph object.\r\n\r\n#### `<Graph object>.setParent(<Graph object>)`\r\n\r\nMake some other graph the parent of the one on which the method is called.\r\nThe properties of the graph are then updated accordingly. You `can` make\r\ngraph inherit from itself, but it would not be fun, I promise. Returns a \r\nreference to the target Graph object.\r\n\r\n#### `<Graph object>.setup({parent: .., panel: .., style: .., hide: ...})`\r\n\r\nJust a shortened syntax for setting several properties of a Graph at once.\r\nReturns a reference to the target Graph object, as usual.\r\n\r\n#### `<Graph object>.dataInterface()`\r\n\r\nExposes the WebGL buffers of the graph. In a later section you would see \r\nhow this can be used for binding a graph to a data generator. Returns \r\na data interface object, *not* the Graph. THe structure of such an object \r\nis similar to\r\n```javascript\r\n{\r\n\tbuffers: {\r\n\t\tindex: .., // edges: [v_1_start, v_1_end, v_2_start, v_2_end...]\r\n\t\tvertex: ... // interleaved: [y,z,x, y,z,x...]\r\n\t},\r\n\tupdate: function() {...}\r\n}\r\n```\r\nA buffer is, well, a resizeable buffer:\r\n```javascript\r\n{\r\n\tarray: <TypedArray>, // read-only\r\n\tlength: <number>\r\n}\r\n``` \r\nTypically you wouldn't want to set these manually, but if you just feel like\r\ndoing something crazy, check out any of the Graph examples. In order for \r\nchanges to take place, call update.\r\n\r\n### Managing styles.\r\n\r\nA Style is an object which stores the palette, from which the colours for \r\nthe graphs are drawn. It is not that amazing right now, but I'm planning\r\non updating it soon. If several graphs share a single Style, they would\r\nbe displayed in distinct colours from the style's palette. If the palette\r\nis updated, the colours of the graphs that have already been issued \r\n(you set the style of the graph first, updated the style next) remain\r\nunchanged.\r\n\r\n#### `new grafar.Style([{paletteSize: <number>}])`\r\n\r\nCreates a new style object. The palette consists of paletteSize (or 10 by \r\ndefault) distinct (but possibly very similar, which I do regret) colours.\r\n\r\n#### `<Style object>.samplePalette(<number>)`\r\n\r\nResize the palette to a given number of colours. Returns a reference to the\r\nStyle object.\r\n\r\n#### `<Style object>.setPalette(<Array of colours>)`\r\n\r\nSet the palette explicitly. Acceptable formats for colours include:\r\n* Hex number (integer from 0 to 255^3) `0xRRGGBB`;\r\n* RGB colour `rgb(r, g, b)`, `r`, `g` and `b` from 0 to 255;\r\n* HSL colour `hsl(r, g, b)`, I'm not quite sure about the ranges;\r\n* Named colour `red` or `magenta` or whatever.\r\nIt basically matches the CSS colours, so check those out.\r\n\r\n##Programming in grafaryaz.\r\n\r\nGrafaryaz is a declarative language developed specifically for approximating \r\ncontinuous mathematical objects. The target object is described with a set \r\nof equations and inequalities. It is a very complicated system still in active \r\ndevelopment, so a myriad of bugs is probably present in it. Beware and feel \r\nfree to drop me an e-mail at v.klepov@gmail.com in case anything goes wrong.\r\n\r\n* Acceptable variable and function names include anything that would do in \r\na conventional programming language. Please, do not use the underscore `_` and \r\nthe dollar mark `$`. Reserved names include `delta` and all the standard \r\nfunction names.\r\n* Standard functions include sin, cos, sqrt, exp, abs, log, pow(<base>, <exponent>) \r\ncan also be written as <base>^<exp>\r\n* Comparison operators are `==` (equals), `<=` and '>=' and `@=` for inclusion \r\n(as in `x @= [1, 3]`).\r\n* Statements are joined into a system with an ampersand `&`.\r\n* A custom function can be defined as follows: `<f_id>(<id_1>, .., <id_n>) == ...`,\r\nand then invoked inside an expression as `<f_id>(<value_1>, .., <value_n>)` or \r\n`<f_id>(<id_a1>, .., <id_an)`. Let me make this even clearer. You can call a\r\nfunction with explicit argument values, as in `f(1, 2)`; you can make a substitution\r\nas in `f(x, y) == x * y & z = f(s, d)`, you can mix the two for partial\r\napplication (`s == 1 & f(x, y) == x * y & d = f(2, s)`). But you *can not*\r\ncall a function on expressions as in `f(x+2, 1)`. If you really want to do it, \r\nconsider something like `x_alt == x+2 & z == f(x_alt, 1)`.\r\n* You can get a partial derivative of a function as follows:\r\n`delta_<f_id>_<var_id>`. Applying this operator does not affect the ordering\r\nof the variables.\r\n\r\nThis intro was far far from comprehensive, so to get a better idea of what to do you\r\nmight want to take a look on `grafaryaz_basics.html`.\r\n\r\n## Binding graphs with data generators\r\n\r\nSo far we've covered the Graphs, which are used for displaying your data, and the\r\nbasic grafaryaz programs for telling the program exactly what data you want. \r\nHere is how they can work together. No updates have been implemented at this stage,\r\nbut I'm planning to add them anytime soon.\r\n\r\n### `new grafaryaz.Context()`.\r\n\r\nCreates a grafaryaz parser.\r\n\r\n### `grafar.bind(<data interface object>, <Context object>)`\r\n\r\nAny data that is generated by a context is displayed in a graph which has \r\nissued the data interface. One context can be shared by different graphs, but \r\nnot vice versa.\r\n\r\n### `<Context object>.set(<string>)`\r\n\r\nThe program passed inside a string is executed inside the context, the\r\nresult is displayed by the bound graphs.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}